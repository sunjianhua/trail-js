<html>
    <head>
        <title>Trail - Examples</title>

        <!-- app -->
        <script type="text/javascript" src="js/trail.min.js"></script>

        <!-- css linkage -->
        <link rel="stylesheet" type="text/css" href="css/trail.css" />
    </head>
    <body>
    <h1>Trail.js Examples</h1>
    <h2>Polygon Mesh</h2>
    <p><b>Overview</b><br />Rough test of pure polygon in a test scene.</p>
    <p><a href="/">... back to examples</a></p>
    <canvas id="canvas" width="640" height="430" style="border:1px solid">

    <!-- on ready -->
    <script type="text/javascript">
        window.onload = function()
        {
            console.log("Document* Ready");




            // TODO these 'should' be abstracted to a utility class in the examples/js folder
            // --- canvas helpers ---

            // canvas
            var canvas = document.getElementById('canvas');
            var ctx = document.getElementById('canvas').getContext('2d');

            // draw a point
            function drawPoint(point)
            {
                ctx.beginPath();
                ctx.arc(point.x, point.y, 2, 0, 2 * Math.PI, false);
                ctx.fillStyle = "rgba(0, 0, 255, 1)";
                ctx.closePath();
                ctx.fill();
            }

            // draw path
            function drawPolygon(poly)
            {
                var vertices = poly.getVertices();

                // draw poly
                ctx.fillStyle = "rgba(20, 20, 255, 0.5)";
                ctx.strokeStyle = '#ff0000';
                ctx.beginPath();
                ctx.moveTo(vertices[0].x, vertices[0].y);

                for(var i = 1; i < vertices.length; i++)
                {
                    ctx.lineTo(vertices[i].x, vertices[i].y);
                }

                ctx.closePath();
                ctx.fill();
                ctx.stroke();

                for(var i = 0; i < vertices.length; i++)
                {
                    // draw vertices
                    drawPoint(vertices[i]);
                }

            }

            // draws an entire mesh
            function drawMesh(mesh)
            {
                var polygons = mesh.getPolygons();
                for(var i = 0; i < polygons.length; i++)
                {
                    var polygon = polygons[i];
                    drawPolygon(polygon, true);
                }
            }




            // MOUSE CLICK DETECTION
            function getMousePos(canvas, evt) {
                var rect = canvas.getBoundingClientRect();
                return {
                    x: (evt.clientX - rect.left).toFixed(0),
                    y: (evt.clientY - rect.top).toFixed(0)
                };
            }
            canvas.addEventListener('mousedown', function(evt) {
                var mousePos = getMousePos(canvas, evt);
                var message = mousePos.x + ',' + mousePos.y + ", ";
                console.log(message);
            }, false);

            // -----------





            var img = new Image();
            img.onload = function()
            {
                ctx.drawImage(img, 0, 0);

                // init app
                TRAIL.sayHi();

                // create a mesh
                var mesh = new TRAIL.Mesh();

                // add two polygons (which overlap - it should fix this when vertices are shared correctly)
                var p1 = new TRAIL.Polygon();
                var p2 = new TRAIL.Polygon();
                p1.setVertices([45,134, 122,51, 182,138, 138,179]);
                p2.setVertices([122,51, 206,19, 232,107, 182,138]);
                mesh.addPolygon(p1);
                mesh.addPolygon(p2);
                mesh.weldPoints(mesh.getPolygon(0).getPoint(1), mesh.getPolygon(1).getPoint(0));

                // update a single vertex position
                mesh.getPolygon(0).getPoint(1).y -= 20;

                // render mesh
                drawMesh(mesh);
            }
            img.src = "img/navmesh-wip.png";


        }
    </script>
    </body>
</html>